// ignore_for_file: noop_primitive_operations

import 'dart:io';

import 'package:path/path.dart' as path;

import 'src/colors.dart';

/// Generates the enum `Ansi8BitColors` from provided JSON color definitions.
///
/// Uses a cached version of `https://www.ditig.com/downloads/256-colors.json`.
///
/// See also: <https://www.ditig.com/256-colors-cheat-sheet>.
void main() {
  final colors = decodeJsonColors(
    File(path.join('tool', '256-colors.json')).readAsStringSync(),
  );

  const command = ''
      'dart tool/generate_8_bit_colors.dart > '
      'lib/src/_8_bit_colors.dart';

  final unique = <String, int>{};

  stdout
    ..writeln('// AUTOMATICALLY GENERATED BY "$command"')
    ..writeln("part of '/neoansi.dart';")
    ..writeln()
    ..writeln('/// 8-bit ANSI supported colors on most terminals.')
    ..writeln("@Deprecated('Renamed to Ansi8BitColor')")
    ..writeln('typedef Ansi8BitColors = Ansi8BitColor;')
    ..writeln()
    ..writeln('/// 8-bit ANSI supported colors on most terminals.')
    ..writeln('///')
    ..writeln(
      '/// This eunm may be used to constrain possible colors in an API, i.e.:',
    )
    ..writeln('/// ```')
    ..writeln(
      '/// void drawText(String message, {Ansi8BitColor? color}) { /* ... */ }',
    )
    ..writeln('/// ```')
    ..writeln('enum Ansi8BitColor {')
    ..writeAll(colors.map((color) {
      return ''
          '  /// Represents "${color.name}", `(${color.rgb.r}, ${color.rgb.g}, ${color.rgb.b})` in RGB.\n'
          '  ${toCamelCaseFromTitleCase(color.name, unique)}';
    }), ',\n\n')
    ..writeln(';')
    ..writeln('}');
}

String toCamelCaseFromTitleCase(String name, Map<String, int> unique) {
  unique[name] ??= 0;
  unique[name] = unique[name]! + 1;
  if (unique[name]! > 1) {
    // ignore: parameter_assignments
    name += '_${unique[name]!}';
  }
  return name[0].toLowerCase() + name.substring(1);
}
